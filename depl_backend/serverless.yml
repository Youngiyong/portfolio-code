service: browny-backend
plugins:
  - serverless-webpack
  - serverless-offline
configValidationMode: error
frameworkVersion: '2'
# env 파일 사용
custom:
  # service application 내 전역적으로 사용하는 서비스 네임, 기본 리소스명이기도 함
  SERVICE_NAME: ${self:service}-${self:provider.stage}
  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'yarn'
    includeModules: true
  documentation:
    models:
      # common
      -
        name: "200"
        description: "OK"
        contentType: "application/json"
        schema: ${file(schema/code/200.json)}
      -
        name: "201"
        description: "Created"
        contentType: "application/json"
        schema: ${file(schema/code/201.json)}
      -
        name: "400"
        description: "Bad Request"
        contentType: "application/json"
        schema: ${file(schema/code/400.json)}
      -
        name: "401"
        description: "UnAuthorized"
        contentType: "application/json"
        schema: ${file(schema/code/401.json)}
      -
        name: "403"
        description: "Forbidden"
        contentType: "application/json"
        schema: ${file(schema/code/403.json)}
      -
        name: "404"
        description: "Not Found"
        contentType: "application/json"
        schema: ${file(schema/code/404.json)}
      -
        name: "500"
        description: "Internal Error"
        contentType: "application/json"
        schema: ${file(schema/code/500.json)}
      -
        name: "Test"
        description: "테스트"
        contentType: "application/json"
        schema: ${file(schema/test.json)}
      -
        name: "requestRefresh"
        description: "refresh token"
        contentType: "application/json"
        schema: ${file(schema/request/auth/refresh.json)}
      -
        name: "responseRefresh"
        description: "refresh token"
        contentType: "application/json"
        schema: ${file(schema/response/auth/refresh.json)}
      -
        name: "responseRedirect"
        description: "redirect url"
        contentType: "application/json"
        schema: ${file(schema/response/auth/redirect.json)}
      -
        name: "responseUpload"
        description: "s3 upload image"
        contentType: "application/json"
        schema: ${file(schema/response/image/upload.json)}
      -
        name: "responseProfile"
        description: "thumnail null update"
        contentType: "application/json"
        schema: ${file(schema/response/profile/profile.json)}
      -
        name: "requestUpdateProile"
        description: "profile update"
        contentType: "application/json"
        schema: ${file(schema/request/profile/update.json)}
      -
        name: "responseFollows"
        description: "follow list"
        contentType: "application/json"
        schema: ${file(schema/response/follow/follows.json)}
      -
        name: "responseFollowers"
        description: "follower list"
        contentType: "application/json"
        schema: ${file(schema/response/follow/followers.json)}
      -
        name: "requestFollow"
        description: "create follow"
        contentType: "application/json"
        schema: ${file(schema/request/follow/create.json)}
      -
        name: "requestCreateUser"
        description: "create user"
        contentType: "application/json"
        schema: ${file(schema/request/user/create.json)}
      -
        name: "requestUpdateEmailCode"
        description: "update Email Code"
        contentType: "application/json"
        schema: ${file(schema/request/auth/email_code.json)}
      -
        name: "requestCheckEmailCode"
        description: "check Email Code"
        contentType: "application/json"
        schema: ${file(schema/request/auth/check_email_code.json)}       
      -
        name: "requestCheckEmail"
        description: "check Email"
        contentType: "application/json"
        schema: ${file(schema/request/auth/check_email.json)}
     
      -
        name: "requestLoginUser"
        description: "request user"
        contentType: "application/json"
        schema: ${file(schema/request/auth/login.json)}
      -
        name: "responseLoginUser"
        description: "response user"
        contentType: "application/json"
        schema: ${file(schema/response/auth/login.json)}
provider:
  name: aws
  runtime: nodejs12.x
  region: ap-northeast-2
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
    name: brownytest-deploy # Deployment bucket name. Default is generated by the framework
    maxPreviousDeploymentArtifacts: 5 # On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5L

  environment:
    DEBUG: true
    # https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    # 기본 : 배포설정, argements 로 입력
    STAGE: ${self:provider.stage}
    # 기본 : labda 타임존 설정
    TZ: "Asia/Seoul"

    # 리소스 설정
    RDS_TYPE: postgres
    RDS_PORT: 5432
    RDS_USERNAME: username
    RDS_DATABASE: databasename
    RDS_HOSTNAME: hostname
    RDS_PASSWORD: password
    JWT_SECRET_KEY: secretkey
    # S3_AWS_ACCESS_KEY_ID: ${env:S3_AWS_ACCESS_KEY_ID}
    # S3_AWS_SECRET_ACCESS_KEY: ${env:S3_AWS_SECRET_ACCESS_KEY}
    GOOGLE_CLIENT_ID: clientId
    GOOGLE_CLIENT_SECRET: secretkey
    GOOGLE_REDIRECT_PATH: callback
    GITHUB_CLIENT_ID: clientid
    GITHUB_CLIENT_SECRET: secretkey
    GITHUB_REDIRECT_PATH: callback
  vpc:
    # securityGroupIds:
    #   - sg-0c26def52725027a2
    # subnetIds:
    #   - subnet-068eb19616780adb7 #public-subnet-a
    #   - subnet-0a5fe2e2a9acd001d #public-subnet-b
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "s3:*"
      Resource: "*"
    # api.doc will call apigateway api
    - Effect: Allow
      Action:
        - "apigateway:*"
      Resource: "*"
    - Effect: Allow
      Action:
        - "dynamodb:*"
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - "apigateway:*"
      Resource: "*"
functions:
  auth:
    handler: src/lib/middlewares/authorized.run
  
  hellofunction:
    handler: src/handler.hello
    events:
      - http:
          path: hello
          method: get
          documentation:
            summary: "테스트 제목"
            description: "테스트 내용"
            tags:
              - "Swagger Tag Example"
            requestBody:
              description: "Example Description"
            requestModels:
              "application/json": "Test"
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "정상 처리 결과"
                responseModels:
                  "application/json": "200"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"
            requestHeaders:
              -
                name: "x-header"
                description: "Header description"
              -
                name: "Authorization"
                description: "Auth Header description"
            queryParams:
              -
                name: "sid"
                description: "Session ID"
              -
                name: "theme"
                description: "Theme for for the website"
  callback:
    handler: src/routes/v1/auth/callback.run
    events:
      - http:
          path: v1/auth/{provider}/callback
          method: get
          request: 
            parameters: 
              paths: 
                provider: true
          cors:
            origin: "*"
            headers: "*"
          documentation:
            summary: "auth callback"
            description: "provider: github, google, kakao"
            tags:
              - "auth"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "200"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"

  redirect:
    handler: src/routes/v1/auth/redirect.run
    events:
      - http:
          path: v1/auth/{provider}/redirect
          method: get
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "get redirect url"
            description: "provider: github, google, kakao"
            tags:
              - "auth"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "responseRedirect"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"
       
  refresh:
    handler: src/routes/v1/auth/refresh.run
    events:
      - http:
          path: v1/auth/refresh
          method: post
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "auth refresh token"
            description: "provider: github, google, kakao"
            tags:
              - "auth"
            requestBody:
              description: "토근 정보"
            requestModels:
              "application/json": "requestRefresh"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "responseRefresh"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"
          
  s3upload:
    handler: src/routes/v1/images/upload.run
    events:
      - http:
          method: post
          path: v1/upload/{folder}
          authorizer: auth
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "s3 upload image"
            description: "folder: profiles, posts, qnas"
            tags:
              - "image"
            # requestBody:
            #   description: "이미지 업로드"
            # requestModels:
            #   "multipart/form-data": "upload"
            requestHeaders:
              -
                name: "Authorization"
                description: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFjYjNjN2M1LTRkNWQtNDI2Ni1iZWY0LTc3NmZmZjZjMjdmYiIsImlhdCI6MTYzNDk3Nzc2NywiZXhwIjoxNjM0OTgxMzY3LCJzdWIiOiJhY2Nlc3NfdG9rZW4ifQ.66CFWs6kVr9fjeGCe0g5EmkwXDmWd8kAPPSVVNnbRw0"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "responseUpload"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"
  deleteProfileImage:
    handler: src/routes/v1/users/profile.deleteProfileImage
    events:
      - http:
          method: delete
          path: v1/users/profile/thumnail
          authorizer: auth
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "profile thumnail null"
            description: "프로필 썸네일 null로 업데이트"
            tags:
              - "profiles"
            requestHeaders:
              -
                name: "Authorization"
                description: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFjYjNjN2M1LTRkNWQtNDI2Ni1iZWY0LTc3NmZmZjZjMjdmYiIsImlhdCI6MTYzNDk3Nzc2NywiZXhwIjoxNjM0OTgxMzY3LCJzdWIiOiJhY2Nlc3NfdG9rZW4ifQ.66CFWs6kVr9fjeGCe0g5EmkwXDmWd8kAPPSVVNnbRw0"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "responseProfile"
              -
                statusCode: "400"
                responseModels:
                  "application/json": "400"
              -
                statusCode: "401"
                responseModels:
                  "application/json": "401"
              -
                statusCode: "403"
                responseModels:
                  "application/json": "403"
              -
                statusCode: "404"
                responseModels:
                  "application/json": "404"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"
  putProfile:
    handler: src/routes/v1/users/profile.putProfile
    events:
      - http:
          method: put
          path: v1/users/profile
          authorizer: auth
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "profile update"
            description: "프로필 정보 업데이트"
            tags:
              - "profiles"
            requestBody:
              description: "토근 정보"
            requestModels:
              "application/json": "requestUpdateProile"
            requestHeaders:
              -
                name: "Authorization"
                description: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFjYjNjN2M1LTRkNWQtNDI2Ni1iZWY0LTc3NmZmZjZjMjdmYiIsImlhdCI6MTYzNDk3Nzc2NywiZXhwIjoxNjM0OTgxMzY3LCJzdWIiOiJhY2Nlc3NfdG9rZW4ifQ.66CFWs6kVr9fjeGCe0g5EmkwXDmWd8kAPPSVVNnbRw0"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "responseProfile"
              -
                statusCode: "400"
                responseModels:
                  "application/json": "400"
              -
                statusCode: "401"
                responseModels:
                  "application/json": "401"
              -
                statusCode: "403"
                responseModels:
                  "application/json": "403"
              -
                statusCode: "404"
                responseModels:
                  "application/json": "404"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"

  joinMemberShip:
    handler: src/routes/v1/auth/login.joinMemberShip
    description: "회원가입 진행 이메일 확인 "
    events:
      - http:
          method: post
          path: v1/users
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "user email check"
            description: "회원가입 기존 가입 여부 확인"
            tags:
              - "users"
            requestBody:
              description: "이메일, 비밀번호, 비밀번호 재확인"
            requestModels:
              "application/json": "requestCreateUser"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "200"
              -
                statusCode: "400"
                responseModels:
                  "application/json": "400"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"
  updatesendEmailAuth:
    handler: src/routes/v1/auth/login.updateSendEmailAuth
    description: "회원가입 이메일 재요청"
    events:
      - http:
          method: put
          path: v1/auth/email_auth
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "email code update"
            description: "이메일 코드 개요청"
            tags:
              - "auth"
            requestBody:
              description: "이메일 정보"
            requestModels:
              "application/json": "requestUpdateEmailCode"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "200"
              -
                statusCode: "400"
                responseModels:
                  "application/json": "400"
              -
                statusCode: "404"
                responseModels:
                  "application/json": "404"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"
  changePasswordSendEmail:
    handler: src/routes/v1/auth/login.changePasswordSendEmail
    description: "비밀번호 변경 이메일 발송 API"
    events:
      - http:
          method: post
          path: v1/auth/password/email_auth
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "user email check"
            description: "비밀번호 변경 기존 가입 여부 확인"
            tags:
              - "auth"
            requestBody:
              description: "이메일, 타입"
            requestModels:
              "application/json": "requestCheckEmail"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "200"
              -
                statusCode: "400"
                responseModels:
                  "application/json": "400"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"
  sendEmailAuth:
    handler: src/routes/v1/auth/login.sendEmailAuth
    description: "회원가입시 이메일 인증 확인 API"
    events:
      - http:
          method: post
          path: v1/auth/email_auth
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "email code check"
            description: "이메일 코드 확인"
            tags:
              - "auth"
            requestBody:
              description: "이메일 정보, 코드, 타입"
            requestModels:
              "application/json": "requestCheckEmailCode"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "200"
              -
                statusCode: "400"
                responseModels:
                  "application/json": "400"
              -
                statusCode: "404"
                responseModels:
                  "application/json": "404"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"
  changePasswdByEmail:
    handler: src/routes/v1/auth/login.changePasswdByEmail
    description: "이메일 인증 후 비밀번호 변경"
    events:
      - http:
          method: put
          path: v1/users/password
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "비밀번호 변경 API"
            description: "비밀번호, 이메일 정보"
            tags:
              - "users"
            requestBody:
              description: "이메일, 비밀번호, 타입"
            requestModels:
              "application/json": "requestCreateUser"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "200"
              -
                statusCode: "400"
                responseModels:
                  "application/json": "400"
              -
                statusCode: "404"
                responseModels:
                  "application/json": "404"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"
  loginByEmailAndPassword:
    handler: src/routes/v1/auth/login.loginByEmailAndPassword
    description: "이메일/패스워드 로그인 API"
    events:
      - http:
          method: post
          path: v1/auth/login
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "로그인 API"
            description: "이메일, 비밀번호 정보"
            tags:
              - "auth"
            requestBody:
              description: "이메일, 비밀번호"
            requestModels:
              "application/json": "requestLoginUser"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "responseLoginUser"
              -
                statusCode: "400"
                responseModels:
                  "application/json": "400"
              -
                statusCode: "404"
                responseModels:
                  "application/json": "404"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"
  # logout:
  #   handler: src/routes/v1/auth/login.logout
  #   description: "로그아웃 API"
  #   events:
  #     - http:
  #         method: put
  #         path: v1/auth/logout
  #         cors:
  #           origin: "*"
  #           headers: "*"
  #         private: false
  #         documentation:
  #           summary: "로그아웃 API"
  #           description: "쿠키 엑세스 토큰, 리프레쉬 토큰 삭제"
  #           tags:
  #             - "auth"
  #           methodResponses:
  #             -
  #               statusCode: "200"
  #               responseModels:
  #                 "application/json": "200"
  #             -
  #               statusCode: "400"
  #               responseModels:
  #                 "application/json": "400"
  #             -
  #               statusCode: "404"
  #               responseModels:
  #                 "application/json": "404"
  #             -
  #               statusCode: "500"
  #               responseModels:
  #                 "application/json": "500"
  getUserFollowsAPI:
    handler: src/routes/v1/users/follow.getUserFollowsAPI
    events:
      - http:
          method: get
          path: v1/users/follows/{user_id}
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "유저 팔로우 리스트 API"
            description: "팔로우 리스트"
            tags:
              - "follows"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "responseFollows"
              -
                statusCode: "400"
                responseModels:
                  "application/json": "400"
              -
                statusCode: "401"
                responseModels:
                  "application/json": "401"
              -
                statusCode: "403"
                responseModels:
                  "application/json": "403"
              -
                statusCode: "404"
                responseModels:
                  "application/json": "404"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"
  getUserFollowersAPI:
    handler: src/routes/v1/users/follow.getUserFollowersAPI
    events:
      - http:
          method: get
          path: v1/users/followers/{user_id}
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "팔로워 리스트 API"
            description: "팔로워 리스트"
            tags:
              - "follows"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "responseFollowers"
              -
                statusCode: "401"
                responseModels:
                  "application/json": "401"
              -
                statusCode: "404"
                responseModels:
                  "application/json": "404"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"
  postUserFollowAPI:
    handler: src/routes/v1/users/follow.postUserFollowAPI
    events:
      - http:
          method: post
          path: v1/users/follows
          authorizer: auth
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "팔로우 등록 API"
            description: "팔로우 등록"
            tags:
              - "follows"
            requestBody:
              description: "follow_user_id"
            requestModels:
              "application/json": "requestFollow"
            requestHeaders:
              -
                name: "Authorization"
                description: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFjYjNjN2M1LTRkNWQtNDI2Ni1iZWY0LTc3NmZmZjZjMjdmYiIsImlhdCI6MTYzNDk3Nzc2NywiZXhwIjoxNjM0OTgxMzY3LCJzdWIiOiJhY2Nlc3NfdG9rZW4ifQ.66CFWs6kVr9fjeGCe0g5EmkwXDmWd8kAPPSVVNnbRw0"
           
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "200"
              -
                statusCode: "400"
                responseModels:
                  "application/json": "400"
              -
                statusCode: "401"
                responseModels:
                  "application/json": "401"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"
  deleteUserFollowAPI:
    handler: src/routes/v1/users/follow.deleteUserFollowAPI
    events:
      - http:
          method: delete
          path: v1/users/follows/{user_id}
          authorizer: auth
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "팔로우 삭제 API"
            description: "팔로우 삭제"
            tags:
              - "follows"
            requestHeaders:
              -
                name: "Authorization"
                description: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFjYjNjN2M1LTRkNWQtNDI2Ni1iZWY0LTc3NmZmZjZjMjdmYiIsImlhdCI6MTYzNDk3Nzc2NywiZXhwIjoxNjM0OTgxMzY3LCJzdWIiOiJhY2Nlc3NfdG9rZW4ifQ.66CFWs6kVr9fjeGCe0g5EmkwXDmWd8kAPPSVVNnbRw0"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "200"
              -
                statusCode: "401"
                responseModels:
                  "application/json": "401"
              -
                statusCode: "404"
                responseModels:
                  "application/json": "404"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"
  
  putTagHandler:
    handler: src/routes/v1/tags/handler.putTagHandler
    events:
      - http:
          method: put
          path: v1/tags/{id}
          authorizer: auth
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "tag 수정 API"
            description: "tag 수정"
            tags:
              - "tags"
            requestBody:
              description: "tag body"
            requestModels:
              "application/json": "requestTag"
            requestHeaders:
              -
                name: "Authorization"
                description: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFjYjNjN2M1LTRkNWQtNDI2Ni1iZWY0LTc3NmZmZjZjMjdmYiIsImlhdCI6MTYzNDk3Nzc2NywiZXhwIjoxNjM0OTgxMzY3LCJzdWIiOiJhY2Nlc3NfdG9rZW4ifQ.66CFWs6kVr9fjeGCe0g5EmkwXDmWd8kAPPSVVNnbRw0"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "200"
              -
                statusCode: "401"
                responseModels:
                  "application/json": "401"
              -
                statusCode: "404"
                responseModels:
                  "application/json": "404"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500" 
  deleteTagHandler:
    handler: src/routes/v1/tags/handler.deleteTagHandler
    events:
      - http:
          method: delete
          path: v1/tags/{id}
          authorizer: auth
          cors:
            origin: "*"
            headers: "*"
          private: false
          documentation:
            summary: "tag 삭제 API"
            description: "tag 삭제"
            tags:
              - "tags"
            requestHeaders:
              -
                name: "Authorization"
                description: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFjYjNjN2M1LTRkNWQtNDI2Ni1iZWY0LTc3NmZmZjZjMjdmYiIsImlhdCI6MTYzNDk3Nzc2NywiZXhwIjoxNjM0OTgxMzY3LCJzdWIiOiJhY2Nlc3NfdG9rZW4ifQ.66CFWs6kVr9fjeGCe0g5EmkwXDmWd8kAPPSVVNnbRw0"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "200"
              -
                statusCode: "401"
                responseModels:
                  "application/json": "401"
              -
                statusCode: "404"
                responseModels:
                  "application/json": "404"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500" 
  postTagHandler:
    handler: src/routes/v1/tags/handler.postTagHandler
    events:
      - http:
          method: post
          path: v1/tags
          authorizer: auth
          cors:
            origin: "*"
            headers: "*"
          private: false
          
          documentation:
            summary: "tag 등록 API"
            description: "tag 등록"
            tags:
              - "tags"
            requestBody:
              description: "tag body"
            requestModels:
              "application/json": "requestTag"
            requestHeaders:
              -
                name: "Authorization"
                description: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFjYjNjN2M1LTRkNWQtNDI2Ni1iZWY0LTc3NmZmZjZjMjdmYiIsImlhdCI6MTYzNDk3Nzc2NywiZXhwIjoxNjM0OTgxMzY3LCJzdWIiOiJhY2Nlc3NfdG9rZW4ifQ.66CFWs6kVr9fjeGCe0g5EmkwXDmWd8kAPPSVVNnbRw0"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "200"
              -
                statusCode: "401"
                responseModels:
                  "application/json": "401"
              -
                statusCode: "404"
                responseModels:
                  "application/json": "404"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"    
  getTagsHandler:
    handler: src/routes/v1/tags/handler.getTagsHandler
    events:
      - http:
          method: get
          path: v1/tags
          authorizer: auth
          cors:
            origin: "*"
            headers: "*"
          private: false
          
          documentation:
            summary: "tag 전체 조회 API"
            description: "tag 조회"
            tags:
              - "tags"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "responseTags"
              -
                statusCode: "401"
                responseModels:
                  "application/json": "401"
              -
                statusCode: "404"
                responseModels:
                  "application/json": "404"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"    
  getTagHandler:
    handler: src/routes/v1/tags/handler.getTagHandler
    events:
      - http:
          method: get
          path: v1/tags/{name}
          cors:
            origin: "*"
            headers: "*"
          private: false
          
          documentation:
            summary: "tag 조회 API"
            description: "tag 조회"
            tags:
              - "tags"
            methodResponses:
              -
                statusCode: "200"
                responseModels:
                  "application/json": "responseTag"
              -
                statusCode: "401"
                responseModels:
                  "application/json": "401"
              -
                statusCode: "404"
                responseModels:
                  "application/json": "404"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "500"   
  writePost:
    handler: src/routes/v1/posts/handler.writePostAPI
    events:
      - http:
          method: post
          path: v1/posts
          authorizer: auth
          cors:
            origin: '*'
            headers: '*'
          private: false
  getPosts:
    handler: src/routes/v1/posts/handler.getPostsAPI
    events:
      - http:
          method: get
          path: v1/posts
          cors:
            origin: '*'
            headers: '*'
          private: false
resources:
  Description: email_auth
  Resources:
    EmailCodeAuthTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: email_auth
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3